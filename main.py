import os
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import datetime
import threading
from collections import defaultdict


class FileCollectorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–°–±–æ—Ä—â–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏ –∫–æ–¥–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ v2.0")
        self.root.geometry("800x600")
        self.root.minsize(700, 500)

        # –°—Ç–∏–ª—å
        self.setup_styles()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.is_processing = False
        self.current_thread = None
        
        self.setup_ui()

    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        style = ttk.Style()
        style.configure("Title.TLabel", font=("Arial", 16, "bold"))
        style.configure("Subtitle.TLabel", font=("Arial", 10, "italic"), foreground="gray")
        style.configure("Stats.TLabel", font=("Consolas", 9))
        style.configure("Success.TLabel", foreground="green")
        style.configure("Error.TLabel", foreground="red")

    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        main_frame = ttk.Frame(self.root, padding="15")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ—Å–æ–≤
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(6, weight=1)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="üìÅ –°–±–æ—Ä—â–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏ –∫–æ–¥–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤", 
                               style="Title.TLabel")
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 10))

        subtitle_label = ttk.Label(main_frame, 
                                  text="–°–æ–±–∏—Ä–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                                  style="Subtitle.TLabel")
        subtitle_label.grid(row=1, column=0, columnspan=3, pady=(0, 20))

        # –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_frame = ttk.LabelFrame(main_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±–æ—Ä–∞", padding="10")
        settings_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 15))
        settings_frame.columnconfigure(1, weight=1)

        ttk.Label(settings_frame, text="–¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞:").grid(row=0, column=0, sticky=tk.W, pady=5)
        self.folder_path = tk.StringVar()
        self.folder_entry = ttk.Entry(settings_frame, textvariable=self.folder_path)
        self.folder_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), pady=5, padx=(5, 5))
        self.browse_button = ttk.Button(settings_frame, text="–û–±–∑–æ—Ä", command=self.browse_folder)
        self.browse_button.grid(row=0, column=2, pady=5)

        ttk.Label(settings_frame, text="–†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:").grid(row=1, column=0, sticky=tk.W, pady=5)
        self.extensions_var = tk.StringVar(
            value=".txt,.py,.js,.java,.cpp,.c,.h,.html,.css,.php,.xml,.json,.csv,.md,.sql,.rb,.go,.rs,.ts,.jsx,.tsx,.yml,.yaml,.ini,.cfg,.conf,.bat,.sh,.ps1,.log")
        self.extensions_entry = ttk.Entry(settings_frame, textvariable=self.extensions_var)
        self.extensions_entry.grid(row=1, column=1, columnspan=2, sticky=(tk.W, tk.E), pady=5)

        ttk.Label(settings_frame, text="–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–∞–ø–∫–∏:").grid(row=2, column=0, sticky=tk.W, pady=5)
        self.ignore_folders_var = tk.StringVar(value=".git,.venv,__pycache__,node_modules,build,dist,.idea,.vscode,target,out,bin,obj")
        self.ignore_folders_entry = ttk.Entry(settings_frame, textvariable=self.ignore_folders_var)
        self.ignore_folders_entry.grid(row=2, column=1, columnspan=2, sticky=(tk.W, tk.E), pady=5)

        action_frame = ttk.Frame(main_frame)
        action_frame.grid(row=3, column=0, columnspan=3, pady=15)

        self.collect_button = ttk.Button(action_frame, text="üìÇ –°–æ–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã", 
                                        command=self.start_collect_files, width=15)
        self.collect_button.pack(side=tk.LEFT, padx=5)

        self.merge_button = ttk.Button(action_frame, text="üîÑ –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ñ–∞–π–ª—ã", 
                                      command=self.start_merge_files, width=15)
        self.merge_button.pack(side=tk.LEFT, padx=5)

        self.settings_button = ttk.Button(action_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–≤–æ–¥–∞", 
                                         command=self.show_settings, width=15)
        self.settings_button.pack(side=tk.LEFT, padx=5)

        self.progress = ttk.Progressbar(main_frame, mode='determinate')
        self.progress.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=5)

        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.status_label = ttk.Label(main_frame, textvariable=self.status_var)
        self.status_label.grid(row=5, column=0, columnspan=3, pady=5)

        stats_frame = ttk.LabelFrame(main_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", padding="5")
        stats_frame.grid(row=6, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(10, 5))
        stats_frame.columnconfigure(1, weight=1)
        stats_frame.rowconfigure(0, weight=1)

        notebook = ttk.Notebook(stats_frame)
        notebook.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S))
 
        log_frame = ttk.Frame(notebook, padding="5")
        notebook.add(log_frame, text="–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        
        self.log_text = tk.Text(log_frame, height=12, wrap=tk.WORD)
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        log_scrollbar = ttk.Scrollbar(log_frame, orient="vertical", command=self.log_text.yview)
        log_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        self.log_text.configure(yscrollcommand=log_scrollbar.set)
        
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
 
        stats_display_frame = ttk.Frame(notebook, padding="5")
        notebook.add(stats_display_frame, text="–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        self.stats_text = tk.Text(stats_display_frame, height=12, wrap=tk.WORD, font=("Consolas", 9))
        self.stats_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        stats_scrollbar = ttk.Scrollbar(stats_display_frame, orient="vertical", command=self.stats_text.yview)
        stats_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        self.stats_text.configure(yscrollcommand=stats_scrollbar.set)
        
        stats_display_frame.columnconfigure(0, weight=1)
        stats_display_frame.rowconfigure(0, weight=1)

        log_buttons_frame = ttk.Frame(stats_frame)
        log_buttons_frame.grid(row=1, column=0, columnspan=2, pady=(5, 0))

        ttk.Button(log_buttons_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", command=self.clear_log).pack(side=tk.LEFT, padx=2)
        ttk.Button(log_buttons_frame, text="–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–∞", command=self.export_log).pack(side=tk.LEFT, padx=2)
        ttk.Button(log_buttons_frame, text="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", command=self.copy_stats).pack(side=tk.LEFT, padx=2)

        self.stats_var = tk.StringVar(value="–§–∞–π–ª–æ–≤: 0 | –°—Ç—Ä–æ–∫: 0 | –°–ª–æ–≤: 0 | –°–∏–º–≤–æ–ª–æ–≤: 0")
        self.stats_label = ttk.Label(main_frame, textvariable=self.stats_var, style="Stats.TLabel")
        self.stats_label.grid(row=7, column=0, columnspan=3, pady=(5, 0))

    def browse_folder(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏"""
        folder_selected = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É")
        if folder_selected:
            self.folder_path.set(folder_selected)

    def log_message(self, message, message_type="info"):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.datetime.now().strftime("%H:%M:%S")
        if message_type == "error":
            prefix = f"[{timestamp}] ‚ùå "
        elif message_type == "warning":
            prefix = f"[{timestamp}] ‚ö†Ô∏è "
        elif message_type == "success":
            prefix = f"[{timestamp}] ‚úÖ "
        else:
            prefix = f"[{timestamp}] ‚ÑπÔ∏è "
        
        self.log_text.insert(tk.END, prefix + message + "\n")
        self.log_text.see(tk.END)
        self.root.update()

    def clear_log(self):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥"""
        self.log_text.delete(1.0, tk.END)

    def export_log(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ª–æ–≥ –≤ —Ñ–∞–π–ª"""
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")],
            title="–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–∞"
        )
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(self.log_text.get(1.0, tk.END))
                self.log_message(f"–õ–æ–≥ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤: {filename}", "success")
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}", "error")

    def copy_stats(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        stats = self.stats_text.get(1.0, tk.END)
        if stats.strip():
            self.root.clipboard_clear()
            self.root.clipboard_append(stats)
            self.log_message("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞", "success")

    def show_settings(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_window = tk.Toplevel(self.root)
        settings_window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–≤–æ–¥–∞")
        settings_window.geometry("400x300")
        settings_window.transient(self.root)
        settings_window.grab_set()

        ttk.Label(settings_window, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞").pack(pady=10)

        
        ttk.Label(settings_window, text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö", 
                 foreground="gray").pack(pady=20)

        ttk.Button(settings_window, text="–ó–∞–∫—Ä—ã—Ç—å", 
                  command=settings_window.destroy).pack(pady=10)

    def should_ignore_folder(self, folder_name, ignore_list):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ø–∫—É"""
        return folder_name in ignore_list

    def get_file_stats(self, file_path):
        """–°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–∞–π–ª—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–∞–±—É–ª—è—Ü–∏–∏"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            lines = content.split('\n')
            line_count = len(lines)
            word_count = len(content.split())
            char_count = len(content)
            char_no_whitespace_count = len(content.replace(' ', '').replace('\t', '').replace('\n', '').replace('\r', ''))
            
            
            tab_count = content.count('\t')
            
            return {
                'lines': line_count,
                'words': word_count,
                'chars_total': char_count,
                'chars_no_whitespace': char_no_whitespace_count,
                'tabs': tab_count,
                'size': os.path.getsize(file_path),
                'content': content
            }
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {str(e)}", "error")
            return None

    def start_collect_files(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.is_processing:
            return
            
        if not self.validate_input():
            return
            
        self.is_processing = True
        self.update_ui_state()
        
        self.current_thread = threading.Thread(target=self.collect_files)
        self.current_thread.daemon = True
        self.current_thread.start()

    def start_merge_files(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.is_processing:
            return
            
        if not self.validate_input():
            return
            
        self.is_processing = True
        self.update_ui_state()
        
        self.current_thread = threading.Thread(target=self.merge_files)
        self.current_thread.daemon = True
        self.current_thread.start()

    def validate_input(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞"""
        folder_path = self.folder_path.get()

        if not folder_path:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É")
            return False

        if not os.path.exists(folder_path):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∑–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False

        return True

    def update_ui_state(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        if self.is_processing:
            self.collect_button.config(state='disabled')
            self.merge_button.config(state='disabled')
            self.settings_button.config(state='disabled')
            self.browse_button.config(state='disabled')
            self.progress.start()
        else:
            self.collect_button.config(state='normal')
            self.merge_button.config(state='normal')
            self.settings_button.config(state='normal')
            self.browse_button.config(state='normal')
            self.progress.stop()

    def collect_files(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤"""
        try:
            folder_path = self.folder_path.get()
            extensions = [ext.strip().lower() for ext in self.extensions_var.get().split(",")]
            ignore_folders = [folder.strip() for folder in self.ignore_folders_var.get().split(",")]

            self.status_var.set("–°–±–æ—Ä —Ñ–∞–π–ª–æ–≤...")
            self.log_text.delete(1.0, tk.END)
            self.stats_text.delete(1.0, tk.END)
            
            self.log_message(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –∏–∑: {folder_path}")
            self.log_message(f"–ò—â–µ–º —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏: {', '.join(extensions)}")
            self.log_message(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–∞–ø–∫–∏: {', '.join(ignore_folders)}")

            output_file = os.path.join(folder_path, "collected_files.txt")
            result = self.process_folder(folder_path, extensions, ignore_folders, output_file)
            
            if result:
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã –≤:\n{output_file}")
                self.status_var.set("–ì–æ—Ç–æ–≤–æ!")
                self.log_message("–°–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!", "success")
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã –∏–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{str(e)}")
            self.status_var.set("–û—à–∏–±–∫–∞")
            self.log_message(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", "error")
        finally:
            self.is_processing = False
            self.root.after(0, self.update_ui_state)

    def merge_files(self):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º"""
        try:
            folder_path = self.folder_path.get()
            extensions = [ext.strip().lower() for ext in self.extensions_var.get().split(",")]
            ignore_folders = [folder.strip() for folder in self.ignore_folders_var.get().split(",")]

            self.status_var.set("–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")
            self.log_text.delete(1.0, tk.END)
            self.stats_text.delete(1.0, tk.END)
            
            self.log_message(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑: {folder_path}")
            self.log_message(f"–ò—â–µ–º —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏: {', '.join(extensions)}")
            self.log_message(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–∞–ø–∫–∏: {', '.join(ignore_folders)}")

            output_file = os.path.join(folder_path, "merged_files.txt")
            result = self.merge_files_with_new_format(folder_path, extensions, ignore_folders, output_file)
            
            if result:
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤:\n{output_file}")
                self.status_var.set("–ì–æ—Ç–æ–≤–æ!")
                self.log_message("–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!", "success")
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ñ–∞–π–ª—ã –∏–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{str(e)}")
            self.status_var.set("–û—à–∏–±–∫–∞")
            self.log_message(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", "error")
        finally:
            self.is_processing = False
            self.root.after(0, self.update_ui_state)

    def process_folder(self, folder_path, extensions, ignore_folders, output_file):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É –∏ —Å–æ–±–∏—Ä–∞–µ—Ç —Ñ–∞–π–ª—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–∞–±—É–ª—è—Ü–∏–∏"""
        total_stats = {
            'files': 0, 'lines': 0, 'words': 0, 'chars_total': 0, 
            'chars_no_whitespace': 0, 'size': 0, 'tabs': 0
        }
        
        file_stats = []

        with open(output_file, 'w', encoding='utf-8') as outfile:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            outfile.write("=" * 80 + "\n")
            outfile.write(f"–°–û–ë–†–ê–ù–ù–´–ï –§–ê–ô–õ–´ –ò–ó –ü–ê–ü–ö–ò: {folder_path}\n")
            outfile.write(f"–í–†–ï–ú–Ø: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            outfile.write("=" * 80 + "\n\n")

            
            for root_dir, dirs, files in os.walk(folder_path):
                
                dirs[:] = [d for d in dirs if not self.should_ignore_folder(d, ignore_folders)]

                for file in files:
                    if self.is_processing == False:  
                        return False
                        
                    file_path = os.path.join(root_dir, file)
                    file_ext = os.path.splitext(file)[1].lower()
                    
                    if file_ext in extensions:
                        try:
                            rel_path = os.path.relpath(file_path, folder_path)
                            self.log_message(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: {rel_path}")

                         
                            stats = self.get_file_stats(file_path)
                            if stats is None:
                                continue

                            
                            outfile.write("\n" + "=" * 80 + "\n")
                            outfile.write(f"–§–ê–ô–õ: {rel_path}\n")
                            outfile.write("=" * 80 + "\n\n")
                            outfile.write(stats['content'])
                            
                            if stats['content'] and not stats['content'].endswith('\n'):
                                outfile.write('\n')

                             total_stats['files'] += 1
                            total_stats['lines'] += stats['lines']
                            total_stats['words'] += stats['words']
                            total_stats['chars_total'] += stats['chars_total']
                            total_stats['chars_no_whitespace'] += stats['chars_no_whitespace']
                            total_stats['size'] += stats['size']
                            total_stats['tabs'] += stats['tabs']
                            
                            file_stats.append({
                                'path': rel_path,
                                'stats': stats
                            })

                             self.update_progress_stats(total_stats)

                        except Exception as e:
                            self.log_message(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path}: {str(e)}", "error")

            outfile.write("\n" + "=" * 80 + "\n")
            outfile.write("–ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n")
            outfile.write("=" * 80 + "\n")
            self.write_detailed_stats(outfile, total_stats, file_stats)

        self.show_detailed_stats(total_stats, file_stats)
        
        self.log_message(f"\n–°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_stats['files']}")
        return total_stats['files'] > 0

    def merge_files_with_new_format(self, folder_path, extensions, ignore_folders, output_file):
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ–∞–π–ª—ã —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        total_stats = {
            'files': 0, 'lines': 0, 'words': 0, 'chars_total': 0, 
            'chars_no_whitespace': 0, 'size': 0, 'tabs': 0
        }
        
        file_stats = []

        with open(output_file, 'w', encoding='utf-8') as outfile:
            outfile.write("=" * 80 + "\n")
            outfile.write(f"–û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ï –§–ê–ô–õ–´ –ò–ó –ü–ê–ü–ö–ò: {folder_path}\n")
            outfile.write(f"–í–†–ï–ú–Ø: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            outfile.write("=" * 80 + "\n\n")

            for root_dir, dirs, files in os.walk(folder_path):
                dirs[:] = [d for d in dirs if not self.should_ignore_folder(d, ignore_folders)]

                for file in files:
                    if self.is_processing == False:
                        return False
                        
                    file_path = os.path.join(root_dir, file)
                    file_ext = os.path.splitext(file)[1].lower()
                    
                    if file_ext in extensions:
                        try:
                            rel_path = os.path.relpath(file_path, folder_path)
                            self.log_message(f"–û–±—ä–µ–¥–∏–Ω—è–µ—Ç—Å—è: {rel_path}")

                            stats = self.get_file_stats(file_path)
                            if stats is None:
                                continue

                            outfile.write("\n" + "=" * 60 + "\n")
                            outfile.write(f"======={rel_path}=======\n")
                            outfile.write("=" * 60 + "\n\n")
                            outfile.write(stats['content'])
                            
                            if stats['content'] and not stats['content'].endswith('\n'):
                                outfile.write('\n')

                            
                            total_stats['files'] += 1
                            total_stats['lines'] += stats['lines']
                            total_stats['words'] += stats['words']
                            total_stats['chars_total'] += stats['chars_total']
                            total_stats['chars_no_whitespace'] += stats['chars_no_whitespace']
                            total_stats['size'] += stats['size']
                            total_stats['tabs'] += stats['tabs']
                            
                            file_stats.append({
                                'path': rel_path,
                                'stats': stats
                            })

                            self.update_progress_stats(total_stats)

                        except Exception as e:
                            self.log_message(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path}: {str(e)}", "error")

            outfile.write("\n" + "=" * 80 + "\n")
            outfile.write("–ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n")
            outfile.write("=" * 80 + "\n")
            self.write_detailed_stats(outfile, total_stats, file_stats)

        self.show_detailed_stats(total_stats, file_stats)
        
        self.log_message(f"\n–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_stats['files']}")
        return total_stats['files'] > 0

    def update_progress_stats(self, stats):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        stats_text = f"–§–∞–π–ª–æ–≤: {stats['files']} | –°—Ç—Ä–æ–∫: {stats['lines']} | –°–ª–æ–≤: {stats['words']} | –°–∏–º–≤–æ–ª–æ–≤: {stats['chars_total']}"
        self.stats_var.set(stats_text)
        self.root.update()

    def write_detailed_stats(self, outfile, total_stats, file_stats):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª"""
        outfile.write(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_stats['files']}\n")
        outfile.write(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {total_stats['lines']:,}\n")
        outfile.write(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {total_stats['words']:,}\n")
        outfile.write(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ (—Å –ø—Ä–æ–±–µ–ª–∞–º–∏): {total_stats['chars_total']:,}\n")
        outfile.write(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤): {total_stats['chars_no_whitespace']:,}\n")
        outfile.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±—É–ª—è—Ü–∏–π: {total_stats['tabs']:,}\n")
        outfile.write(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_stats['size']:,} –±–∞–π—Ç ({total_stats['size'] / 1024 / 1024:.2f} –ú–ë)\n")
        outfile.write(f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏: {total_stats['lines'] and total_stats['chars_total']/total_stats['lines']:.1f} —Å–∏–º–≤–æ–ª–æ–≤\n")
        outfile.write(f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞: {total_stats['words'] and total_stats['chars_no_whitespace']/total_stats['words']:.1f} —Å–∏–º–≤–æ–ª–æ–≤\n")
        outfile.write(f"–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {os.path.basename(outfile.name)}\n")
        outfile.write(f"–°–¥–µ–ª–∞–Ω–æ github/L1ghtsitte, –¢–ì–ö: @hellsfrik\n\n")

        if file_stats:
            outfile.write("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –§–ê–ô–õ–û–í:\n")
            outfile.write("-" * 40 + "\n")
            
            ext_stats = defaultdict(lambda: {'count': 0, 'lines': 0, 'size': 0})
            for file_info in file_stats:
                ext = os.path.splitext(file_info['path'])[1].lower() or '–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è'
                ext_stats[ext]['count'] += 1
                ext_stats[ext]['lines'] += file_info['stats']['lines']
                ext_stats[ext]['size'] += file_info['stats']['size']
            
            for ext, stats in sorted(ext_stats.items()):
                outfile.write(f"{ext:8} | –§–∞–π–ª–æ–≤: {stats['count']:3} | –°—Ç—Ä–æ–∫: {stats['lines']:6} | –†–∞–∑–º–µ—Ä: {stats['size']/1024:7.1f} –ö–ë\n")

    def show_detailed_stats(self, total_stats, file_stats):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ UI"""
        stats_text = f"""–ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò
{'-' * 50}

–û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:
‚Ä¢ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_stats['files']}
‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {total_stats['lines']:,}
‚Ä¢ –í—Å–µ–≥–æ —Å–ª–æ–≤: {total_stats['words']:,}
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ (–≤—Å–µ–≥–æ): {total_stats['chars_total']:,}
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤): {total_stats['chars_no_whitespace']:,}
‚Ä¢ –¢–∞–±—É–ª—è—Ü–∏–π: {total_stats['tabs']:,}
‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_stats['size']:,} –±–∞–π—Ç ({total_stats['size'] / 1024 / 1024:.2f} –ú–ë)

–°–†–ï–î–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏: {total_stats['lines'] and total_stats['chars_total']/total_stats['lines']:.1f} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞: {total_stats['words'] and total_stats['chars_no_whitespace']/total_stats['words']:.1f} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {total_stats['files'] and total_stats['size']/total_stats['files']:.0f} –±–∞–π—Ç

–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–ê–°–®–ò–†–ï–ù–ò–Ø–ú:
"""
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
        ext_stats = defaultdict(lambda: {'count': 0, 'lines': 0, 'size': 0})
        for file_info in file_stats:
            ext = os.path.splitext(file_info['path'])[1].lower() or '–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è'
            ext_stats[ext]['count'] += 1
            ext_stats[ext]['lines'] += file_info['stats']['lines']
            ext_stats[ext]['size'] += file_info['stats']['size']
        
        for ext, stats in sorted(ext_stats.items()):
            stats_text += f"‚Ä¢ {ext:10} - {stats['count']:2} —Ñ–∞–π–ª–æ–≤, {stats['lines']:5} —Å—Ç—Ä–æ–∫, {stats['size']/1024:7.1f} –ö–ë\n"

        self.stats_text.delete(1.0, tk.END)
        self.stats_text.insert(1.0, stats_text)


def main():
    root = tk.Tk()
    app = FileCollectorApp(root)
    root.mainloop()


if __name__ == "__main__":
    main()